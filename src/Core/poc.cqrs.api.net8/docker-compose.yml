version: '3.9'
# docker-compose up --build
networks:
  app-network:
    driver: bridge

services:

# APIS BEGIN -----------------------------------------------------------------------------

  poc.gateway.api-webapi:
    image: ${DOCKER_REGISTRY-}poc.gateway.api-webapi
    container_name: poc.gateway.api-webapi
    restart: always
    build:
      context: .
      dockerfile: src/01-Presentation/Poc.Gateway.API/Dockerfile
    expose:
      - 5078
    ports:
      - 5078:5078
    links:
      - poc.core.api.webapi
      - poc.rh.api.webapi
      - poc.mkt.api.webapi
    networks:
      - app-network
    depends_on:
      - poc.core.api.webapi
      - poc.rh.api.webapi
      - poc.mkt.api.webapi

  poc.core.api.webapi:
    image: ${DOCKER_REGISTRY-}poc.core.api.webapi
    container_name: poc.core.api.webapi
    restart: always
    build:
      context: .
      dockerfile: src/01-Presentation/Poc.Core.API/Dockerfile
    expose:
      - 5075
    ports:
      - 5075:5075
    links:
      - sqlserver
      # - oracle
      - mongoserver
      - kafka
      - rabbitmq
    networks:
      - app-network
    depends_on:
      - sqlserver
      - mongoserver
      - kafka
      - rabbitmq

  poc.rh.api.webapi:
    image: ${DOCKER_REGISTRY-}poc.rh.api.webapi
    container_name: poc.rh.api.webapi
    restart: always
    build:
      context: .
      dockerfile: src/01-Presentation/Poc.RH.API/Dockerfile
    expose:
      - 5076
    ports:
      - 5076:5076
    links:
      - oracle
      - oracle-db
      - mongoserver
      - kafka
    networks:
      - app-network
    depends_on:
      - oracle
      - oracle-db
      - mongoserver
      - kafka

  poc.mkt.api.webapi:
    image: ${DOCKER_REGISTRY-}poc.mkt.api.webapi
    container_name: poc.mkt.api.webapi
    restart: always
    build:
      context: .
      dockerfile: src/01-Presentation/Poc.MKT.API/Dockerfile
    expose:
      - 5077
    ports:
      - 5077:5077
    links:
      # - postgresql
      - mongoserver
      - kafka
    networks:
      - app-network
    depends_on:
      # - postgresql
      - mongoserver
      - kafka 

  poc.api.sqlserver-webapi:
    image: ${DOCKER_REGISTRY-}poc.api.sqlserver-webapi
    container_name: poc.api.sqlserver-webapi
    restart: always
    build:
      context: .
      dockerfile: src/07-Mock/poc.api.sqlserver.net8/Dockerfile
    expose:
      - 5071
    ports:
      - 5071:5071
    links:
      - sqlserver
      # - oracle
      - mongoserver
      - kafka
    networks:
      - app-network
    depends_on:
      - sqlserver
      - mongoserver
      - kafka

  poc.api.gateway-webapi:
    image: ${DOCKER_REGISTRY-}poc.api.gateway-webapi
    container_name: poc.api.gateway-webapi
    restart: always
    build:
      context: .
      dockerfile: src/07-Mock/poc.api.gateway.net8/Dockerfile
    expose:
      - 5254
    ports:
      - 5254:5254
    links:
      - poc.api.sqlserver-webapi
      - poc.api.mongodb-webapi
      - poc.api.redis-webapi
    networks:
      - app-network
    depends_on:
      - poc.api.sqlserver-webapi
      - poc.api.mongodb-webapi
      - poc.api.redis-webapi

  poc.api.mongodb-webapi:
    image: ${DOCKER_REGISTRY-}poc.api.mongodb-webapi
    container_name: poc.api.mongodb-webapi
    restart: always
    build:
      context: .
      dockerfile: src/07-Mock/poc.api.mongodb.net8/Dockerfile
    expose:
      - 5073
    ports:
      - 5073:5073
    links:
      - mongoserver
    networks:
      - app-network
    depends_on:
      - mongoserver

  poc.api.redis-webapi:
    image: ${DOCKER_REGISTRY-}poc.api.redis-webapi
    container_name: poc.api.redis-webapi
    restart: always
    build:
      context: .
      dockerfile: src/07-Mock/poc.api.redis.net8/Dockerfile
    expose:
      - 5074
    ports:
      - 5074:5074
    links:
      - redis 
      - mongoserver
      - kafka
    networks:
      - app-network
    depends_on:
      - redis
      - mongoserver
      - kafka

# APIS END -----------------------------------------------------------------------------

# DB BEGIN -----------------------------------------------------------------------------

  # SQL Server
  # Add-Migration Inicial -Context SqlServerDb
  # Update-Database -Context SqlServerDb
  sqlserver:
    image: mcr.microsoft.com/azure-sql-edge:latest
    cap_add: [ 'SYS_PTRACE' ]
    hostname: mssql
    container_name: sqlserver
    restart: always
    expose:
      - 1433
    ports:
      - 1433:1433
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=@Poc2Minimal@Api
    networks:
      - app-network

# -----------------------------------------------------------------------
# https://hub.docker.com/r/oracleinanutshell/oracle-xe-11g

# docker run -d -p 49161:1521 -p 8080:8080 oracleinanutshell/oracle-xe-11g

# Login http://localhost:8080/apex/apex_admin with following credential:
# username: ADMIN
# password: admin
# password: !G18u03i1986

# DBEaver
# hostname: localhost
# port: 49161
# sid: xe
# username: system
# password: oracle

# .NET Core 
# Install-Package Oracle.ManagedDataAccess.Core
# using Oracle.ManagedDataAccess.Client;
# "DefaultConnection": "User Id=system;Password=oracle;Data Source=//localhost:1521/xe;"

  oracle:
    image: oracleinanutshell/oracle-xe-11g:latest
    container_name: oracle
    ports:
      - "1521:1521"
      - "5500:5500"
    environment:
      - ORACLE_ALLOW_REMOTE=true
      - ORACLE_DISABLE_ASYNCH_IO=true
      - ORACLE_USER=system
      - ORACLE_PASSWORD=oracle
      - ORACLE_DATABASE=xe
    restart: always
    networks:
      - app-network

  oracle-db:
    image: oracleinanutshell/oracle-xe-11g
    container_name: oracle_db
    ports:
      - "49161:1521"
      - "8080:8080"
    environment:
      - ORACLE_ALLOW_REMOTE=true
      - ORACLE_DISABLE_ASYNCH_IO=true
    restart: always
    networks:
      - app-network

# -----------------------------------------------------------------------

# BEGIN MKT -------------------------------------------------------------- 
  mysql:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: Poc2Minimal@Api
      MYSQL_USER: apiMkt
      MYSQL_PASSWORD: Poc2Minimal@Api
      MYSQL_DATABASE: apiMkt
    restart: always
    expose:
      - 3306
    ports:
      - "3306:3306"
    networks:
      - app-network
# End ----------------------------------------------------------------- 

# BEGIN Store -------------------------------------------------------------- 
  postgres:
    image: postgres
    environment:
      POSTGRES_USER: store
      POSTGRES_PASSWORD: Poc2Minimal@Api
      POSTGRES_DB: store
    restart: always
    expose:
      - 5432
    ports:
      - "5432:5432"
    networks:
      - app-network
# End ----------------------------------------------------------------- 
      
  # Redis Cache Server
  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass Poc2Minimal@Api
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    networks:
      - app-network

  mongoserver:
    image: mongo:latest
    container_name: mongoserver
    restart: always
    expose:
      - 27017
    ports:
      - 27017:27017
    networks:
      - app-network

# DB END -----------------------------------------------------------------------------

# WORKER BEGIN -----------------------------------------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    networks: 
      - app-network
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    networks: 
      - app-network
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # http://localhost:9000    
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: always
    ports:
      - "9000:9000"  # Porta que o Kafdrop ficará acessível
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"  # Endereço do broker Kafka, ajuste conforme necessário
      JVM_OPTS: "-Xms32M -Xmx64M"  # Configurações de JVM, ajuste conforme suas necessidades
      SERVER_SERVLET_CONTEXTPATH: "/"  # Contexto raiz do Kafdrop
    depends_on:
      - kafka  # Garante que o Kafka esteja pronto antes de iniciar o Kafdrop
    networks:
      - app-network   

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    restart: always
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - app-network

# WORKER END ----------------------------------------------------------------------------- 
